import requests
import json
import subprocess
from datetime import datetime, timedelta
import urllib3

# Suppress SSL warnings
urllib3.disable_warnings()
# API Configuration
API_URL = 'https://domain'
ACCESS_KEY = 'xxx'
SECRET_KEY = 'yyy'

timestamp_range = "1730160000-1730246400"

# Convert timestamps to datetime objects
start_date = datetime.fromtimestamp(1730160000)
end_date = datetime.fromtimestamp(1730246400)

print(f"\nUsing time range: {start_date} to {end_date}")

# Define the payload for both requests
payload = {
    "query": {
        "type": "vuln",
        "tool": "vulndetails",
        "sourceType": "cumulative",
        "startOffset": 0,
        "endOffset": 1,
        "filters": [{
            "filterName": "lastSeen",
            "operator": "=",
            "value": timestamp_range
        }]
    },
    "sortDir": "asc",
    "sortField": "lastSeen",
    "sourceType": "cumulative",
    "type": "vuln"
}

# 1. Execute curl request
print("\nExecuting curl request...")
curl_command = [
    'curl',
    API_URL,
    '-H', f'"x-apikey: accesskey={ACCESS_KEY}; secretkey={SECRET_KEY}"',
    '-d', "{\"query\": { \"type\": \"vuln\", \"tool\": \"vulndetails\", \"sourceType\": \"cumulative\", \"startOffset\": 0, \"endOffset\": 1, \"filters\": [{\"filterName\": \"lastSeen\", \"operator\": \"=\", \"value\": \"1730160000-1730246400\"}]}, \"sortDir\": \"asc\", \"sortField\": \"lastSeen\", \"sourceType\": \"cumulative\", \"type\": \"vuln\"}"
    ]


try:
    curl_result = subprocess.run(curl_command, capture_output=True, text=True)
    curl_response = json.loads(curl_result.stdout)
    
    # Save curl response
    with open('curl_response.json', 'w') as f:
        json.dump(curl_response, f, indent=2)
    print("Curl response saved to 'curl_response.json'")
    
except Exception as e:
    print(f"Curl request failed: {str(e)}")
    curl_response = None

# 2. Execute Python request
print("\nExecuting Python request...")
headers = {
    'x-apikey': f'accesskey={ACCESS_KEY}; secretkey={SECRET_KEY}'
}

try:
    python_response = requests.post(API_URL, headers=headers, json=payload, verify=False).json()
    
    # Save Python response
    with open('python_response.json', 'w') as f:
        json.dump(python_response, f, indent=2)
    print("Python response saved to 'python_response.json'")
    
except Exception as e:
    print(f"Python request failed: {str(e)}")
    python_response = None

# 3. Compare responses
if curl_response and python_response:
    # Convert both responses to formatted strings for comparison
    curl_str = json.dumps(curl_response, sort_keys=True, indent=2)
    python_str = json.dumps(python_response, sort_keys=True, indent=2)
    
    print("\nComparing responses...")
    if curl_str == python_str:
        print("✅ Responses match exactly!")
    else:
        print("❌ Responses differ")
        print("\nCurl Response:")
        print(curl_str[:200] + "..." if len(curl_str) > 200 else curl_str)
        print("\nPython Response:")
        print(python_str[:200] + "..." if len(python_str) > 200 else python_str)
    
    # Print response sizes
    print(f"\nCurl response size: {len(curl_str)} bytes")
    print(f"Python response size: {len(python_str)} bytes")
else:
    print("\n❌ Cannot compare responses due to request failures") 